function fetchData(g) { // Объявляем функцию fetchData
    const xhr = new XMLHttpRequest(); // Создаем новый объект XMLHttpRequest для выполнения HTTP-запросов
    xhr.open('GET', g, true);

    xhr.onreadystatechange = function () { // Устанавливаем обработчик события для изменения состояния запроса
        if (xhr.readyState === 4 && xhr.status === 200) { // Проверяем, завершен ли запрос и успешен ли он
            handleResponse(xhr.responseText); // Если запрос успешен, передаем текст ответа в функцию handleResponse
            startTimer(5); // Запускаем таймер на 5 секунд
        } else if (xhr.readyState === 4) { // Если запрос завершен, но не успешен
            console.error('Error:', xhr.statusText); // Выводим сообщение об ошибке в консоль
        }
    };

    xhr.send(); // Отправляем запрос
}

function startTimer(seconds) { // Объявляем функцию startTimer, принимающую количество секунд
    let countdown = seconds; // Инициализируем переменную countdown значением seconds

    const interval = setInterval(() => { // Устанавливаем интервал, который будет выполняться каждую секунду
        countdown--; // Уменьшаем значение countdown на 1

        if (countdown < 0) { // Проверяем, если countdown меньше 0
            clearInterval(interval); // Очищаем интервал, чтобы остановить его выполнение
            fetchData(); // Запускаем новый запрос данных
        }
    }, 1000); // Интервал выполнения функции составляет 1000 миллисекунд (1 секунда)
}

let multiDimensionalArray;
let modifiedArray;

function handleResponse(responseText) { // Объявляем функцию handleResponse, принимающую текст ответа
    // Разделяем текст по символу '^'
    const lines = responseText.split('^'); // Разбиваем текст на массив строк, используя символ '^' в качестве разделителя
    // Удаляем лишние пробелы и фильтруем пустые строки
    const filteredLines = lines.map(line => line.trim()).filter(line => line.length > 0); // Удаляем пробелы и фильтруем пустые строки

    // Преобразуем каждую строку в массив подстрок, разделенных символом '|'
    multiDimensionalArray = filteredLines.map(line => line.split('|')); // Разбиваем каждую строку на подстроки, используя символ '|' в качестве разделителя
    //console.log('Массив до удаления 2-го и 10-го элемента:', multiDimensionalArray);
    // Удаляем 2-й и 10-й элементы из каждого подмассива
    modifiedArray = multiDimensionalArray.map(arr => { // Проходим по каждому подмассиву
        return arr.filter((_, index) => index !== 2 && index !== 10 && index !== 9 && index !== 8 && index !== 7); // Фильтруем элементы по индексам
    });

    // Создаем массив объектов с заданными ключами
    const keys = ["st1", "Режим", "Номер сервера", "кол-игроков", "Макс. игроков", "Айди или ник"]; // Определяем ключи для объектов
    const jsonOutput = modifiedArray.map(arr => { // Преобразуем каждый подмассив в объект
        const namedObject = {}; // Создаем пустой объект
        arr.forEach((value, index) => { // Проходим по каждому элементу подмассива
            if (index < keys.length) { // Убедимся, что индекс не выходит за пределы массива ключей
                namedObject[keys[index]] = value; // Присваиваем значения по ключам
            }
        });
        return namedObject; // Возвращаем объект для каждой строки
    });
    //console.table(jsonOutput);
    const filteredOutput = jsonOutput.filter(obj => obj["кол-игроков"] !== "0"); // Фильтруем объекты, оставляя только те, где "кол-игроков" не равен "0"

    // Заменяем значения в графе "Режим"
    const modeMapping = {
        '2': "Стройка",
        '5': "Контра",
        '0': "Битва",
        '3': "Зомби",
        '14': "Гангейм",
        '6': "Резня",
        '7': "Выживание"
    };
    // Заменяем значения в графе "Айди или ник"
    const mapMapping = {
        '1': "Цитадель",
        '2': "Замок",
        '3': "Форпост 2",
        '4': "Осада",
        '5': "Деревня 2",
        '6': "Острова",
        '7': "Собор 2",
        '8': "Город",
        '9': "Слизняк",
        '10': "Форпост 3",
        '11': "Припять",
        '12': "Энергетик",
        '13': "Клазмос",
        '14': "Острова 2017",
        '15': "Эпик",
        '16': "Башни",
        '17': "Пристань",
        '18': "Зимний сад",
        '19': "Общежитие",
        '20': "Зимний замок",
        '21': "Порт",
        '22': "Крепость",
        '23': "Вышка",
        '24': "Япония",
        '25': "Подземка",
        '26': "Секретная база",
        '27': "Канализация",
        '501': "Даст 2",
        '502': "Инферно",
        '503': "Трейн",
        '504': "Ацтек",
        '505': "Нюк",
        '506': "Офис",
        '507': "Кланмил",
        '508': "Даст 1",
        '509': "Меншен",
        '510': "Флай 2",
        '511': "Ацтеки",
        '512': "Даст 2002",
        '513': "Минидаст",
        '514': "Бассейн",
        '515': "Перекрёсток",
        '516': "Кэш",
        '517': "База в пустыне",
        '518': "Станция",
        '519': "Пыль",
        '520': "Моно",
        '521': "Муравейник",
        '522': "Убежище 2",
        '523': "Лаборатория",
        '524': "Квартал",
        '525': "Индия",
        '526': "Минидаст 2",
        '527': "Кобл",
        '528': "Рэд",
        '529': "Ацтериал",
        '530': "Фабрика",
        '531': "Склады",
        '532': "Асцент",
        '533': "Кбн",
        '534': "Элдери",
        '535': "Ассаулт",
        '536': "Пригород",
        '537': "Даст 2 СМ",
        '538': "Шторм",
        '539': "Ангар",
        '540': "Руины",
        '541': "Закаулок",
        '542': "Мираж",
        '543': "Трейн СМ",
        '544': "Турнирная контра",
        '545': "Трущобы",
        '546': "Мидтаун",
        '547': "Милитех",
        '548': "Нюк 2",
        '549': "Моно 2",
        '550': "Бассейн 2",
        '551': "Меншен 2",
        '552': "Берн",
        '553': "Оазис",
        '554': "Санаторий",
        '601': "Стайл",
        '602': "Арена 50",
        '603': "Арена 35",
        '604': "Миниацтек",
        '605': "Корабль",
        '606': "Напрямик",
        '607': "Безумие",
        '608': "Эпицентр",
        '610': "2 моста",
        '611': "Празднество",
        '613': "Маска",
        '614': "Праздничная комната",
        '615': "Праздничное настроение",
        '616': "Кубы",
        '617': "Снежный город",
        '618': "Мост",
        '619': "Вафельница",
        '621': "Меншен",
        '622': "Минидаст",
        '623': "Бассейн",
        '624': "Перекрёсток",
        '626': "Пыль",
        '628': "Индия",
        '630': "Склады",
        '631': "Оверлорд",
        '632': "Платформы",
        '633': "Стилпоинт",
        '1401': "Пасфайнд",
        '1402': "Скретч",
        '1403': "Ангар",
        '1404': "Высотка",
        '1405': "Перекрёсток 2",
        '1406': "Хоринесс",
        '1407': "Дюссельдорф",
        '1408': "Арабика",
        '1409': "Звездолёт",
        '1410': "Австрия",
        '1411': "Индастриал",
        '1412': "Церковь",
        '1413': "Дайр",
        '301': "Деревня-Z 2",
        '302': "Дом",
        '303': "Лабиринт",
        '304': "Мельница",
        '305': "Ракета",
        '306': "Кладбище",
        '307': "Госпиталь",
        '308': "Психушка",
        '309': "Кровавая долина",
        '310': "Тихое место",
        '311': "Лаборатория",
        '312': "Карьер",
        '313': "Бункер",
        '701': "Пляж",
        '702': "Оборона",
        '704': "Селение",
        '705': "Форт",
        '706': "Форт",
        '707': "Заброшенный город",
        '708': "Гиблый хутор",
        '709': "Оборона 2",
        '710': "Шапито",
        '711': "Магистраль",
        '712': "Нашествие",
        '713': "Заправка",
        '714': "Тишина",
    };

    // Заменяем значения в графе "Режим"
    filteredOutput.forEach(obj => {
        if (modeMapping[obj["Режим"]] !== undefined) { // Проверяем, есть ли соответствие в modeMapping
            obj["Режим"] = modeMapping[obj["Режим"]]; // Заменяем значение "Режим" на соответствующее
        }
    });

    // Заменяем значения в графе "Айди или ник"
    filteredOutput.forEach(obj => {
        if (mapMapping[obj["Айди или ник"]] !== undefined) { // Проверяем, есть ли соответствие в mapMapping
            obj["Айди или ник"] = mapMapping[obj["Айди или ник"]]; // Заменяем значение "Айди или ник" на соответствующее
        }
    });





    // Преобразуем массив объектов в формат JSON
    const finalJsonOutput = JSON.stringify(filteredOutput, null, 2); // Преобразуем в JSON с отступами для удобочитаемости

    //console.log(finalJsonOutput); // Выводим JSON-строку

    // Вставляем JSON в тело страницы
    const contentElement = document.querySelector('#gameCards'); // Ищем элемент с классом content
    contentElement.innerHTML = ''; // Очищаем контейнер перед добавлением новых карточек

    // Проходим по каждому объекту в массиве jsonDataArray
    const jsonDataArray = JSON.parse(finalJsonOutput); // Парсим JSON-строку обратно в массив объектов
    jsonDataArray.forEach(jsonData => {
        // Создаем новый элемент карточки
        const card = document.createElement('div'); // Создаем новый div элемент
        card.className = 'card'; // Устанавливаем класс для карточки
        card.className = 'game-card'; // Устанавливаем класс для карточки
        // Заполняем карточку данными
        card.innerHTML = ` 
            <h3>${jsonData["Айди или ник"]}</h3> 
            <p>${jsonData["Режим"]}</p> 
            <p>${jsonData["кол-игроков"]} / 32</p> 
        `;

        // Вставляем карточку в элемент с классом 'content'
        contentElement.appendChild(card); // Добавляем карточку в контейнер
    });

    const cards = document.querySelectorAll('.card'); // Находим все карточки
    const pointer = document.getElementById('pointer'); // Находим элемент указателя

    cards.forEach(card => {
        card.addEventListener('mouseenter', () => { // Добавляем обработчик события на наведение мыши
            pointer.style.width = '0px'; // Уменьшаем размер указателя
            pointer.style.height = '0px';
        });

        card.addEventListener('mouseleave', () => { // Добавляем обработчик события на выход мыши
            pointer.style.width = '2vw'; // Возвращаем указатель к исходным размерам
            pointer.style.height = '2vw';
        });
    });
}

let p = document.getElementById('lliol').getAttribute('link');
// Запускаем первый запрос данных при загрузке страницы
fetchData(p);